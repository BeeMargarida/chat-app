{"ast":null,"code":"import _objectSpread from \"/home/margarida/Documents/chat-app/django-chat/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/margarida/Documents/chat-app/django-chat/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/margarida/Documents/chat-app/django-chat/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { SOCKET_URL } from \"./settings\";\n\nvar WebSocketService =\n/*#__PURE__*/\nfunction () {\n  _createClass(WebSocketService, null, [{\n    key: \"getInstance\",\n    value: function getInstance() {\n      if (!WebSocketService.instance) {\n        WebSocketService.instance = new WebSocketService();\n      }\n\n      return WebSocketService.instance;\n    }\n  }]);\n\n  function WebSocketService() {\n    _classCallCheck(this, WebSocketService);\n\n    this.callbacks = {};\n    this.socketRef = null;\n  }\n\n  _createClass(WebSocketService, [{\n    key: \"connect\",\n    value: function connect(chatUrl) {\n      var _this = this;\n\n      var path = \"\".concat(SOCKET_URL, \"/ws/chat/\").concat(chatUrl, \"/\");\n      this.socketRef = new WebSocket(path);\n\n      this.socketRef.onopen = function () {\n        console.log(\"WebSocket open\");\n      };\n\n      this.socketRef.onmessage = function (e) {\n        _this.socketNewMessage(e.data);\n      };\n\n      this.socketRef.onerror = function (e) {\n        console.log(e.message);\n      };\n\n      this.socketRef.onclose = function () {\n        console.log(\"WebSocket closed let's reopen\");\n\n        _this.connect();\n      };\n    }\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      this.socketRef.close();\n    }\n  }, {\n    key: \"socketNewMessage\",\n    value: function socketNewMessage(data) {\n      var parsedData = JSON.parse(data);\n      var command = parsedData.command;\n\n      if (Object.keys(this.callbacks).length === 0) {\n        return;\n      }\n\n      if (command === \"messages\") {\n        this.callbacks[command](parsedData.messages);\n      }\n\n      if (command === \"new_message\") {\n        this.callbacks[command](parsedData.message);\n      }\n    }\n  }, {\n    key: \"fetchMessages\",\n    value: function fetchMessages(username, chatId) {\n      this.sendMessage({\n        command: \"fetch_messages\",\n        username: username,\n        chatId: chatId\n      });\n    }\n  }, {\n    key: \"newChatMessage\",\n    value: function newChatMessage(message) {\n      this.sendMessage({\n        command: \"new_message\",\n        from: message.from,\n        message: message.content,\n        chatId: message.chatId\n      });\n    }\n  }, {\n    key: \"addCallbacks\",\n    value: function addCallbacks(messagesCallback, newMessageCallback) {\n      this.callbacks[\"messages\"] = messagesCallback;\n      this.callbacks[\"new_message\"] = newMessageCallback;\n    }\n  }, {\n    key: \"sendMessage\",\n    value: function sendMessage(data) {\n      try {\n        this.socketRef.send(JSON.stringify(_objectSpread({}, data)));\n      } catch (err) {\n        console.log(err.message);\n      }\n    }\n  }, {\n    key: \"state\",\n    value: function state() {\n      return this.socketRef.readyState;\n    }\n  }]);\n\n  return WebSocketService;\n}();\n\nWebSocketService.instance = null;\nvar WebSocketInstance = WebSocketService.getInstance();\nexport default WebSocketInstance;","map":{"version":3,"sources":["/home/margarida/Documents/chat-app/django-chat/frontend/src/websocket.js"],"names":["SOCKET_URL","WebSocketService","instance","callbacks","socketRef","chatUrl","path","WebSocket","onopen","console","log","onmessage","e","socketNewMessage","data","onerror","message","onclose","connect","close","parsedData","JSON","parse","command","Object","keys","length","messages","username","chatId","sendMessage","from","content","messagesCallback","newMessageCallback","send","stringify","err","readyState","WebSocketInstance","getInstance"],"mappings":"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","sourcesContent":["import { SOCKET_URL } from \"./settings\";\n\nclass WebSocketService {\n  static instance = null;\n  callbacks = {};\n\n  static getInstance() {\n    if (!WebSocketService.instance) {\n      WebSocketService.instance = new WebSocketService();\n    }\n    return WebSocketService.instance;\n  }\n\n  constructor() {\n    this.socketRef = null;\n  }\n\n  connect(chatUrl) {\n    const path = `${SOCKET_URL}/ws/chat/${chatUrl}/`;\n    this.socketRef = new WebSocket(path);\n    this.socketRef.onopen = () => {\n      console.log(\"WebSocket open\");\n    };\n    this.socketRef.onmessage = e => {\n      this.socketNewMessage(e.data);\n    };\n    this.socketRef.onerror = e => {\n      console.log(e.message);\n    };\n    this.socketRef.onclose = () => {\n      console.log(\"WebSocket closed let's reopen\");\n      this.connect();\n    };\n  }\n\n  disconnect() {\n    this.socketRef.close();\n  }\n\n  socketNewMessage(data) {\n    const parsedData = JSON.parse(data);\n    const command = parsedData.command;\n    if (Object.keys(this.callbacks).length === 0) {\n      return;\n    }\n    if (command === \"messages\") {\n      this.callbacks[command](parsedData.messages);\n    }\n    if (command === \"new_message\") {\n      this.callbacks[command](parsedData.message);\n    }\n  }\n\n  fetchMessages(username, chatId) {\n    this.sendMessage({\n      command: \"fetch_messages\",\n      username: username,\n      chatId: chatId\n    });\n  }\n\n  newChatMessage(message) {\n    this.sendMessage({\n      command: \"new_message\",\n      from: message.from,\n      message: message.content,\n      chatId: message.chatId\n    });\n  }\n\n  addCallbacks(messagesCallback, newMessageCallback) {\n    this.callbacks[\"messages\"] = messagesCallback;\n    this.callbacks[\"new_message\"] = newMessageCallback;\n  }\n\n  sendMessage(data) {\n    try {\n      this.socketRef.send(JSON.stringify({ ...data }));\n    } catch (err) {\n      console.log(err.message);\n    }\n  }\n\n  state() {\n    return this.socketRef.readyState;\n  }\n}\n\nconst WebSocketInstance = WebSocketService.getInstance();\n\nexport default WebSocketInstance;\n"]},"metadata":{},"sourceType":"module"}